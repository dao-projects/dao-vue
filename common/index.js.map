{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/index.js","webpack:///./src/array.js","webpack:///./src/compile.js","webpack:///./src/dep.js","webpack:///./src/observer.js","webpack:///./src/utils.js","webpack:///./src/vue.js","webpack:///./src/watcher.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAA+B;AAC/B,eAAe,mDAAG;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,C;;;;;;;;;;;;ACrBD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACfD;AAAA;AAAA;AAAsC;AACvB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAY;AAC5B;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,mDAAY;AAC5B;AACA,aAAa;AACb;AACA;AACA,gBAAgB,mDAAY;AAC5B;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE,OAAO,EAAE;AAC1B;AACA,YAAY,mDAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACpFA;AAAA;AAAA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAsC;AACf;AACR;AACf;AACA;AACA,mBAAmB,4CAAG;AACtB;AACA;AACA,uBAAuB,mDAAY;AACnC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4CAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4CAAG,uBAAuB,4CAAG;AACnC;AACA,MAAM,4CAAG,0CAA0C,4CAAG;AACtD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAA+B;AACxB;AACP;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,gBAAgB;AAChB,+BAA+B,EAAE,OAAO,EAAE;AAC1C;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,eAAe,EAAE,KAAK,EAAE;AACxB;AACA,oCAAoC,EAAE,OAAO,EAAE;AAC/C;AACA,oBAAoB,gDAAO;AAC3B;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA,gBAAgB,gDAAO;AACvB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,YAAY,gDAAO;AACnB;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,YAAY,gDAAO;AACnB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvGA;AAAA;AAAA;AAAA;AAAiC;AACF;AAChB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAQ;AACpB;AACA,YAAY,gDAAO;AACnB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,C;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAuB;AACe;AACvB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAG;AACX;AACA,uBAAuB,mDAAY;AACnC;AACA,QAAQ,4CAAG;AACX;AACA;AACA;AACA;AACA,uBAAuB,mDAAY;AACnC;AACA;AACA;AACA;AACA;AACA,C","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./public/index.js\");\n","import Vue from '../src/vue.js'\r\nconst vm = new Vue({\r\n    el: \"#app\",\r\n    data: {\r\n        user: {\r\n            name: \"daoxin\",\r\n            age: \"28\"\r\n        },\r\n        textStr: \"vue 响应式的text指令\",\r\n        htmlStr: \"vue 响应式的<span style='color:#bb0'>html</span>指令\",\r\n        modelStr: \"daoxin\",\r\n        arr: [1, 2, 3],\r\n        href:\"http://www.liuhangbiao.com\"\r\n\r\n    },\r\n    methods: {\r\n        handleClick: function () {\r\n            this.user.name = \"my name is daoxin\"\r\n            this.arr.push(Math.floor(Math.random()*10))\r\n        }\r\n    }\r\n})","// 获取Array的原型链\r\nconst arrayProto = Array.prototype;\r\n// 重新创建一个含有对应原型的对象,在下面称为新Array\r\nconst arrayMethods = Object.create(arrayProto);\r\n// 处理7个数组变异方法\r\n['push', 'pop', 'shift', 'unshift', 'reverse', 'sort', 'splice'].forEach(ele => {\r\n    //修改新Array的对应的方法\r\n    arrayMethods[ele] = function () {\r\n        // 执行数组的原生方法,完成其需要完成的内容\r\n        arrayProto[ele].call(this, ...arguments)\r\n        // 获取Observer对象\r\n        const ob = this.__ob__\r\n        // 更新视图\r\n        ob.dep.notify()\r\n    }\r\n})\r\nexport {\r\n    arrayMethods\r\n}","import { complieUtils } from './utils'\r\nexport default class Complie {\r\n    constructor(el, vm) {\r\n        this.el = this.isNodeElement(el) ? el : document.querySelector(el);\r\n        this.vm = vm;\r\n        // 1、将所有的dom对象放到fragement文档碎片中,防止回流\r\n        const fragments = this.nodeTofragments(this.el)\r\n        // 2、编译模板\r\n        this.complie(fragments)\r\n        // 3、追加子元素到根元素\r\n        this.el.appendChild(fragments)\r\n    }\r\n    complie(fragments) {\r\n        //获取所有节点\r\n        const nodes = fragments.childNodes;\r\n        [...nodes].forEach(ele => {\r\n            if (this.isNodeElement(ele)) {\r\n                //1. 编译元素节点\r\n                this.complieElement(ele)\r\n            } else {\r\n                //编译文本节点\r\n                this.complieText(ele)\r\n            }\r\n            //如果有子节点,循环遍历,编译指令\r\n            if (ele.childNodes && ele.childNodes.length) {\r\n                this.complie(ele)\r\n            }\r\n        })\r\n    }\r\n    complieElement(node) {\r\n        //1.获取所有的属性\r\n        const attrs = node.attributes;\r\n        //2.筛选出是属性的\r\n        [...attrs].forEach(attr => {\r\n            //attr是一个对象,name是属性名,value是属性值\r\n            const {\r\n                name,\r\n                value\r\n            } = attr\r\n            //判断是否含有v-开头\r\n            if (name.startsWith(\"v-\")) {\r\n                //将指令分离\r\n                const [, directive] = name.split(\"-\") //text,html,on:click\r\n                const [dirName, paramName] = directive.split(\":\") //处理on:click或bind:name的情况 on,click\r\n                //编译模板\r\n                complieUtils[dirName](node, value, this.vm, paramName)\r\n                //删除属性\r\n                node.removeAttribute(name)\r\n            } else if (name.startsWith(\"@\")) {\r\n                // 如果是事件处理 @click='handleClick'\r\n                let [, paramName] = name.split('@');\r\n                complieUtils['on'](node, value, this.vm, paramName);\r\n                node.removeAttribute('@' + paramName);\r\n            } else if (name.startsWith(\":\")) {\r\n                // 如果是事件处理 :href='...'\r\n                let [, paramName] = name.split(':');\r\n                complieUtils['bind'](node, value, this.vm, paramName);\r\n                node.removeAttribute(':' + paramName);\r\n            }\r\n        })\r\n\r\n    }\r\n    complieText(node) {\r\n        //1.获取所有的文本内容\r\n        const text = node.textContent\r\n        //匹配{{}}\r\n        if (/\\{\\{(.+?)\\}\\}/.test(text)) {\r\n            //编译模板\r\n            complieUtils['text'](node, text, this.vm)\r\n        }\r\n    }\r\n    nodeTofragments(el) {\r\n        //获取文档中的dom节点,将dom节点加到文档碎片中\r\n        const f = document.createDocumentFragment()\r\n        let firstChild;\r\n        while (firstChild = el.firstChild) {\r\n            f.appendChild(firstChild)\r\n        }\r\n        return f\r\n    }\r\n    isNodeElement(el) {\r\n        //判断是否是元素还是文本\r\n        return el.nodeType === 1;\r\n    }\r\n}","// 订阅者收集器\r\nexport default class Dep {\r\n    constructor() {\r\n        //管理的watcher的数组\r\n        this.subs = []\r\n    }\r\n    addSubs(watcher) {\r\n        //添加watcher\r\n        this.subs.push(watcher)\r\n    }\r\n    notify() {\r\n        //通知watcher更新dom\r\n        this.subs.forEach(w => w.update())\r\n    }\r\n}","import { arrayMethods } from './array'\r\nimport Dep from './dep'\r\nexport default class Observer {\r\n  constructor(data) {\r\n    //用于对数组进行处理,存放数组的观察者watcher\r\n    this.dep = new Dep() \r\n    if (Array.isArray(data)) {\r\n      //如果是数组,使用数组的变异方法\r\n      data.__proto__ = arrayMethods\r\n      //把数组数据添加 __ob__ 一个Observer,当使用数组变异方法时,可以更新视图\r\n      data.__ob__ = this\r\n      //给数组的每一项添加数据劫持(setter/getter处理)\r\n      this.observerArray(data)\r\n    } else {\r\n      //非数组数据添加数据劫持(setter/getter处理)\r\n      this.walk(data)\r\n    }\r\n  }\r\n  walk(data) {\r\n    //数据劫持\r\n    if (data && typeof data === \"object\") {\r\n      for (const key in data) {\r\n        //绑定\r\n        this.defineReactive(data, key, data[key])\r\n      }\r\n    }\r\n  }\r\n  //循环遍历数组,为数组每一项设置setter/getter\r\n  observerArray(items) {\r\n    for (let i = 0; i < items.length; i++) {\r\n      this.observer(items[i])\r\n    }\r\n  }\r\n  observer(data) {\r\n    //如果是数组,择创建一个新的Observer\r\n    if (Array.isArray(data)) {\r\n      //创建新的Obserber,主要目的是为了实现数组变异方法,更新视图\r\n      let ob = new Observer(data)\r\n      //返回Obserber\r\n      return ob\r\n    }else{\r\n      this.walk(data)\r\n    }\r\n  }\r\n  //数据劫持,设置 setter/getteer\r\ndefineReactive(data, key, value) {\r\n  let arrayOb = this.observer(value)\r\n  //创建订阅者/收集依赖\r\n  const dep = new Dep()\r\n  //setter和getter处理\r\n  Object.defineProperty(data, key, {\r\n    //可枚举的\r\n    enumerable: true,\r\n    //可修改的\r\n    configurable: false,\r\n    get() {\r\n      //当 Dep 有 watcher 时, 添加 watcher\r\n      Dep.target && dep.addSubs(Dep.target)\r\n      //如果是数组,则添加上数组的观察者\r\n      Dep.target && arrayOb && arrayOb.dep.addSubs(Dep.target) \r\n      return value\r\n    },\r\n    set: (newVal) => {\r\n      //新旧数据不相等时更改\r\n      if (value !== newVal) {\r\n        //为新设置的数据添加setter/getter\r\n        arrayOb = this.observer(newVal);\r\n        value = newVal\r\n        //通知 dep 数据发送了变化\r\n        dep.notify()\r\n      }\r\n    }\r\n  })\r\n}\r\n}\r\n","import Watcher from './watcher'\r\nexport const complieUtils = {\r\n    //通过表达式, vm获取data中的值, person.name\r\n    getValue(expr, vm) {\r\n        return expr.split(\".\").reduce((data, currentVal) => {\r\n            return data[currentVal]\r\n        }, vm.$data)\r\n    },\r\n    //通过表达式,vm,输入框的值,实现设置值,input中v-model双向数据绑定\r\n    setVal(expr, vm, inputVal) {\r\n        expr.split(\".\").reduce((data, currentVal) => {\r\n            data[currentVal] = inputVal\r\n        }, vm.$data)\r\n    },\r\n    //获取值\r\n    getContentVal(expr, vm) {\r\n        //解析{{}}的形式\r\n        return expr.replace(/\\{\\{(.+?)\\}\\}/g, (...args) => {\r\n            return this.getValue(args[1], vm)\r\n        })\r\n    },\r\n    //处理text指令\r\n    text(node, expr, vm) {\r\n        let value;\r\n        if (/\\{\\{.+?\\}\\}/.test(expr)) {\r\n            //处理 {{}}\r\n            value = expr.replace(/\\{\\{(.+?)\\}\\}/g, (...args) => {\r\n                //绑定观察者/更新函数\r\n                new Watcher(vm, args[1], () => {\r\n                    //第二个参数,传入回调函数\r\n                    this.updater.updaterText(node, this.getContentVal(expr, vm))\r\n                })\r\n                return this.getValue(args[1], vm)\r\n            })\r\n        } else {\r\n            //v-text\r\n            new Watcher(vm, expr, (newVal) => {\r\n                this.updater.updaterText(node, newVal)\r\n            })\r\n            //获取到value值\r\n            value = this.getValue(expr, vm)\r\n        }\r\n        //调用更新函数\r\n        this.updater.updaterText(node, value)\r\n    },\r\n    //处理html指令\r\n    html(node, expr, vm) {\r\n        const value = this.getValue(expr, vm)\r\n        //绑定watcher\r\n        new Watcher(vm, expr, (newVal) => {\r\n            this.updater.updaterHtml(node, newVal)\r\n        })\r\n        //更新dom元素的操作\r\n        this.updater.updaterHtml(node, value)\r\n    },\r\n    //处理model指令\r\n    model(node, expr, vm) {\r\n        const value = this.getValue(expr, vm)\r\n        //绑定watcher\r\n        new Watcher(vm, expr, (newVal) => {\r\n            this.updater.updaterModel(node, newVal)\r\n        })\r\n        //双向数据绑定\r\n        node.addEventListener(\"input\", (e) => {\r\n            //设值方法\r\n            this.setVal(expr, vm, e.target.value)\r\n        })\r\n        this.updater.updaterModel(node, value)\r\n    },\r\n    //on指令\r\n    on(node, expr, vm, paramName) {\r\n        //获取methods中的方法\r\n        let fn = vm.$options.methods && vm.$options.methods[expr]\r\n        //为dom节点绑定相应的事件\r\n        node.addEventListener(paramName, fn.bind(vm), false)\r\n    },\r\n    //bind绑定\r\n    bind(node, expr, vm, paramName) {\r\n        // v-bind:href='xxx' => href='xxx'\r\n        const value = this.getValue(expr, vm)\r\n        //设置属性\r\n        this.updater.updaterAttr(node, paramName, value)\r\n    },\r\n\r\n    //更新dom元素的方法\r\n    updater: {\r\n        //更新文本\r\n        updaterText(node, value) {\r\n            node.textContent = value\r\n        },\r\n        //更新html\r\n        updaterHtml(node, value) {\r\n            node.innerHTML = value\r\n        },\r\n        //更新输入框内容\r\n        updaterModel(node, value) {\r\n            node.value = value\r\n        },\r\n        //更新属性\r\n        updaterAttr(node, key, value) {\r\n            node.setAttribute(key, value);\r\n        }\r\n    }\r\n}","import Observer from './observer'\r\nimport Complie from './compile'\r\nexport default class Vue {\r\n    constructor(options) {\r\n        //获取模板\r\n        this.$el = options.el;\r\n        //获取data中的数据\r\n        this.$data = options.data;\r\n        //将对象中的属性存起来,以便后续使用\r\n        this.$options = options\r\n        //1.数据劫持,设置setter/getter\r\n        new Observer(this.$data)\r\n        //2.编译模板,解析指令\r\n        new Complie(this.$el, this)\r\n        if (this.$el) { //如果有模板\r\n            //代理this\r\n            this.proxyData(this.$data)\r\n        }\r\n    }\r\n    proxyData(data) {\r\n        for (const key in data) {\r\n            //将当前的数据放到全局指向中\r\n            Object.defineProperty(this, key, {\r\n                get() {\r\n                    return data[key];\r\n                },\r\n                set(newVal) {\r\n                    data[key] = newVal\r\n                }\r\n            })\r\n        }\r\n    }\r\n}","import Dep from './dep'\r\nimport { complieUtils } from './utils'\r\nexport default class Watcher {\r\n    constructor(vm, expr, cb) {\r\n        //当前的vue实例\r\n        this.vm = vm;\r\n        //表达式\r\n        this.expr = expr;\r\n        //回调函数,更新dom\r\n        this.cb = cb\r\n        //获取旧的数据,此时获取旧值的时候,Dep.target会绑定上当前的this\r\n        this.oldVal = this.getOldVal()\r\n    }\r\n    getOldVal() {\r\n        //将当前的watcher绑定起来\r\n        Dep.target = this\r\n        //获取旧数据\r\n        const oldVal = complieUtils.getValue(this.expr, this.vm)\r\n        //绑定完成后,将绑定的置空,防止多次绑定\r\n        Dep.target = null\r\n        return oldVal\r\n    }\r\n    update() {\r\n        //更新函数\r\n        const newVal = complieUtils.getValue(this.expr, this.vm)\r\n        if (newVal !== this.oldVal || Array.isArray(newVal)) {\r\n            //条用更新在compile中创建watcher时传入的回调函数\r\n            this.cb(newVal)\r\n        }\r\n    }\r\n}"],"sourceRoot":""}